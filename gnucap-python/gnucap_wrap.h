/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_gnucap_WRAP_H_
#define SWIG_gnucap_WRAP_H_

#include <map>
#include <string>


class SwigDirector_CKT_BASE : public CKT_BASE, public Swig::Director {

public:
    SwigDirector_CKT_BASE(PyObject *self);
    SwigDirector_CKT_BASE(PyObject *self, std::string const &s);
    SwigDirector_CKT_BASE(PyObject *self, CKT_BASE const &p);
    virtual ~SwigDirector_CKT_BASE();
    using CKT_BASE::set_command_ac;
    using CKT_BASE::set_command_dc;
    using CKT_BASE::set_command_op;
    using CKT_BASE::set_command_tran;
    using CKT_BASE::set_command_fourier;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;
};


class SwigDirector_CARD : public CARD, public Swig::Director {

public:
    SwigDirector_CARD(PyObject *self);
    SwigDirector_CARD(PyObject *self, CARD const &arg0);
    virtual ~SwigDirector_CARD();
    virtual std::string value_name() const;
    virtual bool param_is_printable(int arg0) const;
    virtual std::string param_name(int arg0) const;
    virtual std::string param_name(int arg0, int arg1) const;
    virtual std::string param_value(int arg0) const;
    virtual void set_param_by_name(std::string arg0, std::string arg1);
    virtual void set_param_by_index(int arg0, std::string &arg1, int arg2);
    virtual int param_count() const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class CARD doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[8];
#endif

};


class SwigDirector_CMD : public CMD, public Swig::Director {

public:
    SwigDirector_CMD(PyObject *self);
    virtual ~SwigDirector_CMD();
    virtual std::string value_name() const;
    virtual bool param_is_printable(int arg0) const;
    virtual std::string param_name(int arg0) const;
    virtual std::string param_name(int arg0, int arg1) const;
    virtual std::string param_value(int arg0) const;
    virtual void set_param_by_name(std::string arg0, std::string arg1);
    virtual void set_param_by_index(int arg0, std::string &arg1, int arg2);
    virtual int param_count() const;
    virtual void do_it(CS &cmd, CARD_LIST *arg0);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class CMD doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[9];
#endif

};


class SwigDirector_SIM : public SIM, public Swig::Director {

public:
    SwigDirector_SIM(PyObject *self);
    virtual ~SwigDirector_SIM();
    virtual std::string value_name() const;
    virtual bool param_is_printable(int arg0) const;
    virtual std::string param_name(int arg0) const;
    virtual std::string param_name(int arg0, int arg1) const;
    virtual std::string param_value(int arg0) const;
    virtual void set_param_by_name(std::string arg0, std::string arg1);
    virtual void set_param_by_index(int arg0, std::string &arg1, int arg2);
    virtual int param_count() const;
    virtual void do_it(CS &cmd, CARD_LIST *arg0);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class SIM doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[9];
#endif

};


class SwigDirector_SIMWrapper : public SIMWrapper, public Swig::Director {

public:
    SwigDirector_SIMWrapper(PyObject *self);
    virtual ~SwigDirector_SIMWrapper();
    virtual std::string value_name() const;
    virtual bool param_is_printable(int arg0) const;
    virtual std::string param_name(int arg0) const;
    virtual std::string param_name(int arg0, int arg1) const;
    virtual std::string param_value(int arg0) const;
    virtual void set_param_by_name(std::string arg0, std::string arg1);
    virtual void set_param_by_index(int arg0, std::string &arg1, int arg2);
    virtual int param_count() const;
    virtual void do_it(CS &cmd, CARD_LIST *arg0);
    virtual void setup(CS &arg0);
    virtual void sweep();
    virtual void store_results(double arg0);
    virtual void store_resultsSwigPublic(double arg0) {
      SIMWrapper::store_results(arg0);
    }
    using SIMWrapper::alarmlist;
    using SIMWrapper::plotlist;
    using SIMWrapper::printlist;
    using SIMWrapper::storelist;
    using SIMWrapper::outdata;
    using SIMWrapper::head;
    using SIMWrapper::print_results;
    using SIMWrapper::alarm;
    using SIMWrapper::alloc_vectors;
    using SIMWrapper::unalloc_vectors;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class SIMWrapper doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[12];
#endif

};


class SwigDirector_TRANSIENT : public TRANSIENT, public Swig::Director {

public:
    SwigDirector_TRANSIENT(PyObject *self);
    virtual ~SwigDirector_TRANSIENT();
    virtual std::string value_name() const;
    virtual bool param_is_printable(int arg0) const;
    virtual std::string param_name(int arg0) const;
    virtual std::string param_name(int arg0, int arg1) const;
    virtual std::string param_value(int arg0) const;
    virtual void set_param_by_name(std::string arg0, std::string arg1);
    virtual void set_param_by_index(int arg0, std::string &arg1, int arg2);
    virtual int param_count() const;
    virtual void do_it(CS &arg0, CARD_LIST *scope);
    virtual void accept();
    virtual void sweep();
    virtual void sweepSwigPublic() {
      TRANSIENT::sweep();
    }
    using TRANSIENT::_cont;
    using TRANSIENT::outdata;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class TRANSIENT doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[11];
#endif

};


#endif
